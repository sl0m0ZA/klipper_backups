# All customizations are documented in globals.cfg. Just copy a variable from
# there into the section below, and change the value to meet your needs.

[gcode_macro _km_options]
# These are examples of some likely customizations:
# Any sheets in the below list will be available with a configurable offset.
#variable_bed_surfaces: ['smooth_1','texture_1']
# Length (in mm) of filament to load (bowden tubes will be longer).
variable_load_length: 60.0
# Hide the Octoprint LCD menu since I don't use it.
variable_menu_show_octoprint: False
# Customize the filament menus (up to 10 entries).
variable_menu_temperature: [
  {'name' : 'PLA',  'extruder' : 210.0, 'bed' : 70.0},
  {'name' : 'PETG', 'extruder' : 250.0, 'bed' : 75.0},
  {'name' : 'ABS',  'extruder' : 250.0, 'bed' : 110.0},
  {'name' : 'ABS-X','extruder' : 250.0, 'bed' : 90.0},
  {'name' : 'SBS',  'extruder' : 230.0, 'bed' : 70.0},
  {'name' : 'CPE',  'extruder' : 260.0, 'bed' : 85.0},
  {'name' : 'TPU',  'extruder' : 210.0, 'bed' : 60.0}]

# Length of filament (in millimeters) to purge at print start.
variable_start_purge_length: 30 # This value works for most setups.
gcode: # This line is required by Klipper.
# Any code you put here will run at klipper startup, after the initialization
# for these macros. For example, you could uncomment the following line to
# automatically adjust your bed surface offsets to account for any changes made
# to your Z endstop or probe offset.
  ADJUST_SURFACE_OFFSETS
# This line includes all the standard macros.
[include klipper-macros/*.cfg]
# Uncomment to include features that require specific hardware support.
# LCD menu support for features like bed surface selection and pause next layer.
#[include klipper-macros/optional/lcd_menus.cfg]
# Optimized bed leveling
[include klipper-macros/optional/bed_mesh.cfg]

## AUTO_Z_ATTEMPT ##########################################################################
[gcode_macro SET_BASELINE_ZSTOP]
variable_pos_x: 15
variable_pos_y: -10
variable_probe_offset_x: 41
variable_probe_offset_y: 4
variable_z_pos: 0.0
gcode:
  {% set x = (pos_x + probe_offset_x) %}
  {% set y = (pos_y + probe_offset_y) %}
  ##
  {% if  printer.toolhead.homed_axes != 'XYZ' %}
  G28			#Home All Axes
  {% endif %}
  BRUSH_NOZZLE
  G28 Z
  G1 X{x} Y{y} Z6 F15000
  PROBE PROBE_SPEED=10
  {% set z_pos = printer.probe.last_z_result %}
  G1 Z6
  PROBE PROBE_SPEED=10
  {% set z_pos = printer.probe.last_z_result %}

[gcode_macro SET_BASELINE_ZBED]
variable_bed_x: 120
variable_bed_y: 105
variable_probe_offset_x: 41
variable_probe_offset_y: 4
variable_z_bed: 0.0
gcode:
  {% if  printer.toolhead.homed_axes != 'XYZ' %}
  G28			#Home All Axes
  {% endif %}
  G1 X{bed_x} Y{bed_y} Z6 F15000
  PROBE PROBE_SPEED=10
  {% set z_bed = printer.probe.last_z_result %}
  G1 X{bed_x} Y{bed_y} Z6 F15000
  PROBE PROBE_SPEED=10
  {% set z_bed = printer.probe.last_z_result %}

[gcode_macro TEST]
description: Test Macro
gcode:
  SET_BASELINE_ZSTOP
  {% set z_stop = printer.probe.last_z_result %}
  #{% if {z_stop} == '0.0' %}
  #  SET_BASELINE_ZSTOP
  #  {% set z_stop = printer.probe.last_z_result %}
  #{% endif %}
  SET_BASELINE_ZBED
  {% set z_bed = printer.probe.last_z_result %}
  #{% if {z_bed} == '0.0' %}
  #  SET_BASELINE_ZBED
  #  {% set z_bed = printer.probe.last_z_result %}
  #{% endif %}
  ##
  G1 Z10
  RESPOND TYPE=echo MSG="Z-Stop: {z_stop} Bed-Z: {z_bed}" 

###########################################################################################

# Marlin Compatibility G-Codes
[gcode_macro m201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel: 1.7976931348623157e+308
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
    SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m203]
description: Sets maximum velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set velocity = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY="{velocity}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m205]
description: Sets square corner velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
      (params.X|default(0)|float, params.Y|default(0)|float)|min}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    SET_IDLE_TIMEOUT TIMEOUT=6000
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    G90
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro m900]
description: Sets pressure advance.
  Usage: M900 [K<advance>] [T<extruder_index>]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if km.pressure_advance_scale > 0.0 %}
    {% set extruder = "extruder" ~ params.T|replace('0', '')
       if "T" in params else printer.toolhead.extruder %}
    {% if 'K' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
        params.K|float * km.pressure_advance_scale}"
    {% endif %}
  {% endif %}


[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  
  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    ##
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
    ##
  {% endif %}

[gcode_macro _reset_velocity_limits]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode:
  SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

# # # Klipper Adaptive Purging - Line # # #

# This macro will parse information from objects in your gcode and create a nearby purge!
# For successful purging, you may need to configure:
# 
# [extruder]
# ...
# max_extrude_cross_section: 5

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: False      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.3              # Height above the bed to purge
variable_purge_amount: 20           # Amount of filament in millimeters to purge
variable_line_length: 25            # Overall desired length of purge line in millimeters, around 1/5th of X axis length is a good starting value
variable_flow_rate: 12              # Desired flow rate in mm3/s (Around 12 for standard flow hotends, around 24 for high flow hotends)
variable_x_default: 20             # Default X location to purge. If adaptive_enable is True, this is overwritten
variable_y_default: 25             # Default Y location to purge. If adaptive_enable is True, this is overwritten
variable_distance_to_object_y: 10   # Y distance in millimeters away from the print area for purging. Must be less than or equal to y_default if adaptive_enable is False

### This section is for those who are using Moonraker's Update Manager for KAMP, or want a more verbose macro. ###

variable_display_parameters: True   # Display macro paramters in the console, useful for debugging the SETUP_LINE_PURGE call, or more verbosity.

gcode:
    {% if display_parameters == True %}
      { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
      { action_respond_info("z_height        : %f" % (z_height))  }
      { action_respond_info("purge_amount    : %f" % (purge_amount))  }
      { action_respond_info("line_length     : %f" % (line_length))  }
      { action_respond_info("flow_rate       : %f" % (flow_rate))  }
      { action_respond_info("x_default       : %f" % (x_default))  }
      { action_respond_info("y_default       : %f" % (y_default))  }
      { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
    {% endif %}

    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
    {% set cross_section = nozzle_dia * z_height | float %}
    {% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    G92 E0                                                                              # Reset extruder
    G0 F{travel_speed}                                                                  # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin - distance_to_object_y}                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}                    # Purge line
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height + 8} F{travel_speed}                                                  # Z hop

[gcode_macro SETUP_LINE_PURGE]
gcode:
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(30)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(30)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(20)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(25)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

#====================================================================#
# Nozzle wipe in brush
#====================================================================#
[gcode_macro BRUSH_NOZZLE]
gcode:
  {% set wipe_count = 5 %}
  BLTOUCH_DEBUG COMMAND=pin_up
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  G90
  G0 Z10 F5000
  G0 X227 Y0 F10000
  {% for wipe in range(wipe_count) %}
    {% for coordinate in [(240,0),(240,40)] %}
     G0 X{coordinate[0] + 0.5 * wipe} Y{coordinate[1]} Z5 F6000
   {% endfor %}
  {% endfor %}
  G0 Z10 F5000
  G0 X100 Y100 Z10 F5000
  RESTORE_GCODE_STATE NAME=clean_nozzle_state
  
#====================================================================#
# Start Print and End Print
#====================================================================#
# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(200)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('none')|string %}
    {% set NOZZLE_DIAMETER = params.NOZZLE_DIAMETER|default(0)|float %}
    {% set NOZZLE_DIAMETER_SETTING = printer.save_variables.variables.nozzle_diameter|default(0)|float %}
    {% if NOZZLE_DIAMETER != NOZZLE_DIAMETER_SETTING %}
      M118 Nozzle Diameter Mismatch
      CANCEL_PRINT
    {% else %}
    CLEAR_PAUSE
    # Start bed heating
    M140 S{BED_TEMP}
    # Start nozzle heating
    M104 S{EXTRUDER_TEMP}
    # Use absolute coordinates
    G90
    # Get Auto-Z Offset
    G28
    #BRUSH_NOZZLE
    #G28
    #AUTO_OFFSET_Z
    #Adjust filament Z offset AFTER homing and set brush flag
    {% set brush_head = False %}
    {% if FILAMENT_PROFILE == 'PLA' %}
      SET_GCODE_OFFSET Z=0
    {% elif FILAMENT_PROFILE == 'PETG' %}
      SET_GCODE_OFFSET Z=0
      {% set brush_head = True %}
    {% elif FILAMENT_PROFILE == 'SBS' %}
      SET_GCODE_OFFSET Z=0
    {% elif FILAMENT_PROFILE == 'ABS' %}
      SET_GCODE_OFFSET Z=0
      {% set brush_head = True %}
    {% elif FILAMENT_PROFILE == 'ABS-X' %}
      SET_GCODE_OFFSET Z=0
      {% set brush_head = True %}
    {% elif FILAMENT_PROFILE == 'CPE' %}
      SET_GCODE_OFFSET Z=0
      {% set brush_head = True %}
    {% elif FILAMENT_PROFILE == 'TPU 95A' %}
      SET_GCODE_OFFSET Z=0
    {% elif FILAMENT_PROFILE == 'TPU' %}
      SET_GCODE_OFFSET Z=0
    {% else %}
      SET_GCODE_OFFSET Z=0
      {% set brush_head = True %}
    {% endif %}
    # Move the nozzle over the bed
    G1 X10 Y20 Z10 F3000
    # Move the nozzle very close to the bed
    #G1 Z3 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Load mesh profile
    BED_MESH_PROFILE LOAD=default
    # Line Purge
    #SETUP_LINE_PURGE
    #LINE_PURGE
    ## ==== Tradistional Cura Double line down side of bed purge ==== #
    G92 E0 ; Reset Extruder
    G1 Z6.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.8 Y20 Z0.3 F5000.0 ; Move to start position
    G1 X0.8 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
    G1 X1.0 Y200.0 Z0.3 F5000.0 ; Move to side a little
    G1 X1.0 Y20 Z0.3 F1500.0 E30 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z5.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z1.5 F5000.0 ; Move over to prevent blob squish
    ## =============================================================== ##
    # Clean nozzle (only needed for filament profile)
    {% if (brush_head) %}
      BRUSH_NOZZLE
    {% endif %}
    ## Reset Extruder  
    G92 E0
    # Enable filament sensor
    SFS_ENABLE
  {% endif %} 

[gcode_macro END_PRINT]
gcode:
    # Disable filament sensor
    SFS_DISABLE
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Present Print
    PRESENT_PRINT

[gcode_macro PRESENT_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Present print
    G1 X0 Y220 
    # Disable all steppers but Z
    M84 X Y E ;

# level gantry
[gcode_macro G34]
gcode:
    Z_TILT_ADJUST

# Pause Alias for Cura
[gcode_macro M0]
gcode:
  PAUSE 

# PID tuning
[gcode_macro PID_CLIBRATE_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=70

[gcode_macro PID_CLIBRATE_EXTRUDER]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=235

# CR Touch
[gcode_macro CRTOUCH_PIN_DOWN]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro CRTOUCH_PIN_UP]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro CRTOUCH_RESET]
gcode:
  BLTOUCH_DEBUG COMMAND=reset

[gcode_macro M48]
gcode:
  PROBE_ACCURACY

[gcode_macro NOZZLE_CHANGE]
gcode:
  {% set NOZZLE_DIAMETER = params.NOZZLE_DIAMETER|default(printer.save_variables.variables.nozzle_diameter)|float %}
  _CG28
  G1 X110 Y200 Z100 F3000
  SAVE_VARIABLE VARIABLE=nozzle_diameter VALUE='{NOZZLE_DIAMETER}'
  M109 S220

[gcode_macro _CURA_SET_PRINT_STATS_INFO]
gcode:
  {% if params.LAYER_COUNT is defined %}
    SET_PRINT_STATS_INFO TOTAL_LAYER={params.LAYER_COUNT}
  {% endif %}
  {% if params.LAYER is defined %}
    SET_PRINT_STATS_INFO CURRENT_LAYER={(params.LAYER | int) + 1}
  {% endif %}

## Moved from mainsail.cfg
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # Turn off filament sensor
  SFS_DISABLE
  # restore idle_timeout time if needed
  #{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
  #  SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  #{% endif %}
  #{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  #_CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  #{client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  PRESENT_PRINT

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  #{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set temp = params.EXTRUDER|default(200)|float %}
  #{% set restore = False if printer.toolhead.extruder == '' else True  if params.RESTORE|default(1)|int == 1 else False %}
  {% set restore = True %}
  ##### end of definitions #####
  # Turn off filament sensor
  SFS_DISABLE
  # Set resume values
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  #{client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default('') == ''     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  #{% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
  #                else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set can_extrude = True %}
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  # Enable filament sensor
  SFS_ENABLE
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': PAUSE }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': PAUSE }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

  


[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further '640' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
gcode:
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    M600
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
  {% endif %}


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  150
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    #G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
